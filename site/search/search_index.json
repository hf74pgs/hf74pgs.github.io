{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"HOME","text":""},{"location":"#section-1","title":"Section 1","text":"<p>```csharp</p> <pre><code>class Program\n{\n    static void Main(string[] args)\n    {\n        // === Settings (modify as needed) ===\n        int numLinesToGrab = 2000;                        // Number of lines to acquire (N)\n        string savePath = @\"C:\\Images\\linescan_result.png\";\n        string deviceUserID = \"0\";                        // First found device or Camera UserID\n        string triggerSource = \"Line1\";                   // External trigger input line\n        string triggerActivation = \"RisingEdge\";          // Rising/Falling edge\n        int grabTimeoutMs = -1;                           // -1: Wait indefinitely (depending on model, \"grab_timeout\" may also be used)\n        bool enforceSameWidth = true;                     // Ensure same width for safety (should be same width basically)\n\n        HTuple acqHandle = null;\n        var lineImages = new List&lt;HObject&gt;(capacity: numLinesToGrab);\n\n        try\n        {\n            acqHandle = OpenGigEVision(deviceUserID);\n\n            // LineStart (1 pulse = 1 line acquisition)\n            ConfigureLineTrigger(acqHandle, triggerSource, triggerActivation);\n\n            // Specify pixel format if needed (e.g., monochrome)\n            // HOperatorSet.SetFramegrabberParam(acqHandle, \"PixelFormat\", \"Mono8\");\n\n            HOperatorSet.GrabImageStart(acqHandle, -1);\n\n            // Acquire N lines (returns one line per external trigger)\n            for (int i = 0; i &lt; numLinesToGrab; i++)\n            {\n                HObject oneLine = GrabOneLine(acqHandle, grabTimeoutMs);\n                lineImages.Add(oneLine);\n                if ((i + 1) % 100 == 0) Console.WriteLine($\"Grabbed lines: {i + 1}/{numLinesToGrab}\");\n            }\n\n            // Option to align widths for safety (should be same width basically)\n            if (enforceSameWidth) EqualizeWidthsInPlace(lineImages);\n\n            // Combine vertically (N rows x 1 column) to create 2D image\n            HObject fullImage = TileImagesVertically(lineImages);\n\n            Directory.CreateDirectory(Path.GetDirectoryName(savePath) ?? \".\");\n            HOperatorSet.WriteImage(fullImage, GetExtAsHalconType(savePath), 0, savePath);\n            Console.WriteLine($\"Saved: {savePath}\");\n\n            fullImage.Dispose();\n        }\n        catch (HalconException hex)\n        {\n            Console.Error.WriteLine($\"HALCON ERROR: #{hex.GetErrorCode()} {hex.GetErrorMessage()}\");\n        }\n        catch (Exception ex)\n        {\n            Console.Error.WriteLine($\"ERROR: {ex.Message}\");\n        }\n        finally\n        {\n            foreach (var img in lineImages) img?.Dispose();\n            if (acqHandle != null &amp;&amp; acqHandle.IsInitialized())\n            {\n                try { HOperatorSet.CloseFramegrabber(acqHandle); } catch { /* ignore */ }\n            }\n        }\n    }\n\n    // Open GigE Vision frame grabber\n    static HTuple OpenGigEVision(string deviceUserID)\n    {\n        HOperatorSet.OpenFramegrabber(\n            \"GigEVision\",\n            0, 0, 0, 0, 0, 0,\n            \"progressive\",\n            -1,\n            \"default\",\n            -1,\n            \"false\",      // External trigger details set below\n            \"default\",\n            deviceUserID, // \"0\" or Camera UserID\n            0,\n            -1,\n            out HTuple acqHandle);\n\n        // Set bandwidth etc. here if needed (model dependent)\n        // HOperatorSet.SetFramegrabberParam(acqHandle, \"GevSCPSPacketSize\", 9000);\n\n        return acqHandle;\n    }\n\n    // Set line trigger (GenICam keys are model dependent. General example)\n    static void ConfigureLineTrigger(HTuple acqHandle, string triggerSource, string triggerActivation)\n    {\n        // Which event to trigger on: line unit\n        HOperatorSet.SetFramegrabberParam(acqHandle, \"TriggerSelector\", \"LineStart\");\n\n        // Enable trigger\n        HOperatorSet.SetFramegrabberParam(acqHandle, \"TriggerMode\", \"On\");\n\n        // External input line or encoder etc. (e.g., Line1)\n        HOperatorSet.SetFramegrabberParam(acqHandle, \"TriggerSource\", triggerSource);\n\n        // Rising/Falling edge\n        HOperatorSet.SetFramegrabberParam(acqHandle, \"TriggerActivation\", triggerActivation);\n\n        // Set exposure or gain if needed\n        // HOperatorSet.SetFramegrabberParam(acqHandle, \"ExposureTime\", 20_000.0); // Example: 20,000 us\n        // For encoder synchronization, set model-specific features (e.g., LineTriggerSource=\"Encoder\" etc.)\n    }\n\n    // Acquire one line (blocks until external trigger arrives)\n    static HObject GrabOneLine(HTuple acqHandle, int timeoutMs)\n    {\n        // The third argument of GrabImageAsync is -1 for infinite wait. If you want to use timeout, set \"grab_timeout\" if supported by the model\n        HOperatorSet.GrabImageAsync(out HObject lineImg, acqHandle, -1);\n        return lineImg;\n    }\n\n    // Combine images vertically (N rows x 1 column)\n    static HObject TileImagesVertically(List&lt;HObject&gt; imageList)\n    {\n        if (imageList == null || imageList.Count == 0)\n            throw new ArgumentException(\"imageList is empty.\");\n\n        HOperatorSet.GenEmptyObj(out HObject all);\n        foreach (var img in imageList)\n        {\n            HOperatorSet.ConcatObj(all, img, out all);\n        }\n\n        HOperatorSet.TileImages(all, out HObject tiled, imageList.Count, 1);\n        all.Dispose();\n        return tiled;\n    }\n\n    // Align widths to the maximum (should be same width basically, but for safety)\n    static void EqualizeWidthsInPlace(List&lt;HObject&gt; imageList)\n    {\n        int maxWidth = 0;\n        var sizes = new List&lt;(int w, int h)&gt;(imageList.Count);\n\n        foreach (var img in imageList)\n        {\n            HOperatorSet.GetImageSize(img, out HTuple w, out HTuple h);\n            int wi = w.I, hi = h.I;         // For line, h is usually 1\n            sizes.Add((wi, hi));\n            if (wi &gt; maxWidth) maxWidth = wi;\n        }\n\n        for (int i = 0; i &lt; imageList.Count; i++)\n        {\n            var (w, h) = sizes[i];\n            if (w == maxWidth) continue;\n\n            double scale = (double)maxWidth / Math.Max(1, w);\n            int newH = Math.Max(1, (int)Math.Round(h * scale)); // h=1 is usual\n            HOperatorSet.ZoomImageSize(imageList[i], out HObject resized, maxWidth, newH, \"constant\");\n            imageList[i].Dispose();\n            imageList[i] = resized;\n        }\n    }\n\n    // Extension -&gt; HALCON write type\n    static string GetExtAsHalconType(string path)\n    {\n        var ext = Path.GetExtension(path)?.ToLowerInvariant();\n        return ext switch\n        {\n            \".png\" =&gt; \"png\",\n            \".jpg\" or \".jpeg\" =&gt; \"jpeg\",\n            \".bmp\" =&gt; \"bmp\",\n            \".tif\" or \".tiff\" =&gt; \"tiff\",\n            _ =&gt; \"png\"\n        };\n    }\n}\n</code></pre>"},{"location":"samples/","title":"MD","text":""},{"location":"samples/#section-2","title":"Section 2","text":"<p>```csharp</p> <p>using System; using System.Collections.Generic; using System.IO; using HalconDotNet;</p> <p>public static class HalconCameraConfig {     ///      /// 2\u884cCSV (\u30d8\u30c3\u30c0 + \u5024) \u304b\u3089\u30ab\u30e1\u30e9\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a     ///      public static void ApplyCameraParamsFromCsv2Row(HTuple acqHandle, string csvFilePath)     {         if (!File.Exists(csvFilePath))             throw new FileNotFoundException(\"CSV\u30d5\u30a1\u30a4\u30eb\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\", csvFilePath);</p> <pre><code>    var lines = File.ReadAllLines(csvFilePath);\n    if (lines.Length &lt; 2)\n        throw new FormatException(\"CSV\u30d5\u30a1\u30a4\u30eb\u306f\u30d8\u30c3\u30c0\u3068\u5024\u306e2\u884c\u304c\u5fc5\u8981\u3067\u3059\");\n\n    var headers = lines[0].Split(',');\n    var values = lines[1].Split(',');\n\n    if (headers.Length != values.Length)\n        throw new FormatException(\"\u30d8\u30c3\u30c0\u3068\u5024\u306e\u6570\u304c\u4e00\u81f4\u3057\u307e\u305b\u3093\");\n\n    for (int i = 0; i &lt; headers.Length; i++)\n    {\n        string key = headers[i].Trim();\n        string valStr = values[i].Trim();\n\n        if (string.IsNullOrEmpty(key))\n            continue;\n\n        HTuple val;\n        if (double.TryParse(valStr, out double d))\n            val = d;\n        else if (int.TryParse(valStr, out int n))\n            val = n;\n        else\n            val = valStr;\n\n        try\n        {\n            HOperatorSet.SetFramegrabberParam(acqHandle, key, val);\n            Console.WriteLine($\"Set: {key} = {val}\");\n        }\n        catch (HalconException ex)\n        {\n            Console.WriteLine($\"SetFramegrabberParam\u5931\u6557: {key} = {val} \u2192 {ex.Message}\");\n        }\n    }\n}\n</code></pre> <p>}</p>"}]}